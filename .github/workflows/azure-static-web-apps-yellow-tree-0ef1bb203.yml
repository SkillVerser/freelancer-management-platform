name: Azure Static Web Apps CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

jobs:
  build_and_deploy_job:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          lfs: false

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # Install and build backend
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      # Create simple build script for backend
      - name: Create build script for backend
        run: |
          cd backend
          cat > build.js << 'EOL'
          const fs = require('fs');
          const path = require('path');

          // Create api directory if it doesn't exist
          if (!fs.existsSync(path.join(__dirname, '../api'))) {
            fs.mkdirSync(path.join(__dirname, '../api'));
          }

          // Copy backend files to api directory
          const filesToCopy = [
            'server.js',
            'package.json',
            'package-lock.json'
          ];

          // Copy directories recursively
          const directoriesToCopy = [
            'configs',
            'controllers',
            'models',
            'routes'
          ];

          // Copy files
          filesToCopy.forEach(file => {
            fs.copyFileSync(
              path.join(__dirname, file),
              path.join(__dirname, '../api', file)
            );
            console.log(`Copied: ${file}`);
          });

          // Create copy directory function
          function copyDir(src, dest) {
            if (!fs.existsSync(dest)) {
              fs.mkdirSync(dest, { recursive: true });
            }
            
            const entries = fs.readdirSync(src, { withFileTypes: true });
            
            for (let entry of entries) {
              const srcPath = path.join(src, entry.name);
              const destPath = path.join(dest, entry.name);
              
              if (entry.isDirectory()) {
                copyDir(srcPath, destPath);
              } else {
                fs.copyFileSync(srcPath, destPath);
                console.log(`Copied: ${srcPath} -> ${destPath}`);
              }
            }
          }

          // Copy directories
          directoriesToCopy.forEach(dir => {
            copyDir(
              path.join(__dirname, dir),
              path.join(__dirname, '../api', dir)
            );
            console.log(`Copied directory: ${dir}`);
          });

          // Create static web app config in api directory
          const staticWebAppConfig = {
            "routes": [
              {
                "route": "/api/*",
                "methods": ["GET", "POST", "PUT", "DELETE"],
                "rewrite": "/api/$1"
              },
              {
                "route": "/auth/*",
                "methods": ["GET", "POST"],
                "rewrite": "/auth/$1"
              },
              {
                "route": "/users/*",
                "methods": ["GET", "POST", "PUT", "DELETE"],
                "rewrite": "/users/$1"
              }
            ],
            "auth": {
              "identityProviders": {
                "google": {
                  "registration": {
                    "clientIdSettingName": "GOOGLE_CLIENT_ID",
                    "clientSecretSettingName": "GOOGLE_CLIENT_SECRET"
                  },
                  "login": {
                    "scopes": ["profile"]
                  }
                }
              }
            }
          };

          fs.writeFileSync(
            path.join(__dirname, '../api/staticwebapp.config.json'),
            JSON.stringify(staticWebAppConfig, null, 2)
          );
          console.log('Created staticwebapp.config.json');

          // Create a .env file in api directory
          const envContent = `
          MONGO_URI=${process.env.MONGO_URI || ''}
          GOOGLE_CLIENT_ID=${process.env.GOOGLE_CLIENT_ID || ''}
          GOOGLE_CLIENT_SECRET=${process.env.GOOGLE_CLIENT_SECRET || ''}
          cookieKey=${process.env.COOKIE_KEY || ''}
          FRONTEND_URL=${process.env.FRONTEND_URL || ''}
          NODE_ENV=production
          `;

          fs.writeFileSync(
            path.join(__dirname, '../api/.env'),
            envContent.trim()
          );
          console.log('Created .env file');

          console.log('Backend build completed successfully');
          EOL

          # Execute the build script
          node build.js
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          COOKIE_KEY: ${{ secrets.COOKIE_KEY }}
          FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
          NODE_ENV: production

      # Install and build frontend
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build
        env:
          CI: false
          NODE_ENV: production
          REACT_APP_API_URL: /api

      # Deploy to Azure Static Web Apps
      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_YELLOW_TREE_0EF1BB203 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/frontend/"
          api_location: "/api" # Now points to our prepared api directory
          output_location: "build"
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          cookieKey: ${{ secrets.COOKIE_KEY }}
          FRONTEND_URL: ${{ secrets.FRONTEND_URL }}

  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    steps:
      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_YELLOW_TREE_0EF1BB203 }}
          action: "close"
